{"version":3,"sources":["components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/AccountBalance/AccountBalance.jsx","logo.svg","components/Header/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["CoinRow","styled","td","Coin","props","name","ticker","price","showBalance","balance","action","method","onClick","event","preventDefault","handleRefresh","tickerId","Table","table","CoinList","coinData","map","key","Section","section","AccountBalance","buttonText","content","amount","handleBalanceToggle","Head","header","Img","img","H1","h1","Header","src","logo","alt","Component","Content","div","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93889c35.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst CoinRow = styled.td`\r\nborder: 1px solid;\r\n    width: 25vh;\r\n`;\r\nexport default function Coin(props) {\r\n    \r\n    const  handleClick = (event) => {\r\n        // Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n\r\n        props.handleRefresh(props.tickerId);\r\n    }  \r\n        return (\r\n            <tr>\r\n              <CoinRow>{props.name}</CoinRow>\r\n              <CoinRow>{props.ticker}</CoinRow>\r\n              <CoinRow>${props.price}</CoinRow>\r\n              {props.showBalance ? <CoinRow>{props.balance}</CoinRow> : null}\r\n              <CoinRow>\r\n                  <form action=\"#\" method=\"POST\">\r\n                  <button onClick={handleClick}>Refresh</button>\r\n                  </form>            \r\n              </CoinRow>\r\n            </tr>\r\n           );\r\n    \r\n}\r\n\r\nCoin.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired,\r\n    balance: PropTypes.number.isRequired\r\n}\r\n","import React from 'react';\r\nimport Coin from \"../Coin/Coin\";\r\nimport styled from 'styled-components';\r\n\r\nconst Table = styled.table`\r\nmargin: 50px auto 50px auto;\r\n  display: inline-block;\r\n  font-size: 1.4rem;\r\n`;\r\nexport default function CoinList(props) {\r\n    \r\n  return (\r\n<Table>\r\n  <thead>\r\n    <tr>\r\n      <th>Name</th>\r\n      <th>Ticker</th>\r\n      <th>Price</th>\r\n      {props.showBalance ? <th>Balance</th> : null}\r\n      <th>Actions</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    {\r\n      props.coinData.map( ({key, name, ticker, balance, price}) => \r\n      <Coin key={key} \r\n      tickerId={key}\r\n      handleRefresh={props.handleRefresh} \r\n      name={name} \r\n      ticker={ticker} \r\n      showBalance={props.showBalance}\r\n      balance={balance}\r\n      price={price}\r\n        />,\r\n      )\r\n    }\r\n  </tbody>\r\n</Table>\r\n  )\r\n    \r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'; \r\nimport styled from 'styled-components'\r\n\r\nconst Section = styled.section`\r\n    font-size: 2rem;\r\n    text-align: left;\r\n    padding: 1.5rem  0 1.5rem 5rem;\r\n\r\n`;\r\nexport default function AccountBalance(props) {\r\n    const buttonText= props.showBalance ? 'Hide Balance' : 'Show Balance';\r\n    let content = null;\r\n    if ( props.showBalance ) {\r\n        content = <>Balance: ${props.amount} </>;\r\n    }\r\n    \r\n    return (\r\n        <Section>\r\n            {content}  \r\n            <button onClick={props.handleBalanceToggle}>{buttonText}</button>\r\n        </Section>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired\r\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport logo from '../../logo.svg';\r\n\r\nconst Head = styled.header`\r\nbackground-color: #282c34;\r\n  min-height: 20rem;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  font-size: 36px;\r\n`;\r\n\r\nconst Img = styled.img`\r\nheight: 8rem;\r\npointer-events: none;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\nfont-size: 4rem;\r\n`;\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <Head>\r\n           <Img src={logo} alt=\"React logo\" />\r\n            <H1>\r\n              Coin Exchange \r\n            </H1>\r\n          </Head>\r\n        )\r\n    }\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport CoinList from './components/CoinList/CoinList';\r\nimport AccountBalance from './components/AccountBalance/AccountBalance';\r\nimport Header from './components/Header/Header';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\n\r\nconst Content = styled.div`\r\ntext-align: center;\r\n  background-color: rgb(82, 79, 79);\r\n  color: rgb(180, 178, 19);\r\n`;\r\n\r\nconst COIN_COUNT = 10;\r\nconst formatPrice = price => parseFloat(Number(price).toFixed(4));\r\n\r\n\r\nfunction App(props) {\r\n  const [balance, setBalance] = useState(10000);\r\n  const [showBalance, setShowBalance] = useState(true)\r\n  const [coinData, setCoinData] = useState([]); \r\n\r\nconst componentDidMount = async () => {\r\n  const response = await axios.get('https://api.coinpaprika.com/v1/coins');\r\n  const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\r\n  const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/'\r\n  const promises = coinIds.map(id => axios.get(tickerUrl + id));\r\n  const coinData = await Promise.all(promises);   \r\n  const coinPriceData = coinData.map(function(response) {\r\n    const coin = response.data;\r\n    return {\r\n      key: coin.id,\r\n      name: coin.name,\r\n      ticker: coin.symbol,\r\n      balance: 0,\r\n      price: formatPrice(coin.quotes.USD.price),\r\n    };\r\n  })\r\n  // Retrieve the prices    \r\n  setCoinData(coinPriceData);\r\n  }\r\n\r\n  useEffect(function() {\r\n    if (coinData.length === 0 ) {\r\n     componentDidMount();\r\n    } \r\n  });\r\n\r\n  const handleRefresh = async (valueChangeId) => {\r\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\r\n    let response = await axios.get(tickerUrl);\r\n    const newPrice = formatPrice(response.data.quotes.USD.price);\r\n    const newCoinData = coinData.map( function( values ) {\r\n      let newValues = {...values};\r\n      if (valueChangeId === values.key) {\r\n        newValues.price = newPrice;\r\n      }\r\n      return newValues;\r\n    });\r\n  \r\n    setCoinData(newCoinData);\r\n  }\r\n\r\n  const   handleBalanceToggle = () => {\r\n       setShowBalance(oldValue => !oldValue);\r\n     }\r\n\r\n  \r\n    return (\r\n      <Content>\r\n        <Header />\r\n        <AccountBalance amount={balance}\r\n          showBalance={showBalance}\r\n          handleBalanceToggle={handleBalanceToggle} />\r\n       <CoinList coinData={coinData}\r\n        handleRefresh={handleRefresh}\r\n        showBalance={showBalance} />\r\n      </Content>\r\n    );\r\n  \r\n  \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}